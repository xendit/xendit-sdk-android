apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group 'com.xendit'
version '3.8.0'

ext {
    bintrayOrg = 'xendit'
    bintrayRepo = 'android'
    bintrayName = 'xendit-sdk-android'

    publishedGroupId = this.group
    libraryName = 'Xendit'
    artifact = 'xendit-android'

    libraryDescription = 'Xendit makes it simple to collect credit card information securely, without it having to touch your server'

    siteUrl = 'https://github.com/xendit/xendit-sdk-android'
    gitUrl = 'https://github.com/xendit/xendit-sdk-android.git'

    libraryVersion = this.version

    developerId = '0505gonzalez'
    developerName = 'Juan Gonzalez.'
    developerEmail = 'juan@xendit.co'

    licenseName = 'MIT'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.volley:volley:1.2.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.core:core:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.snowplowanalytics:snowplow-android-tracker:2.1.1@aar'

    // sentry
    api 'io.sentry:sentry-android:4.3.0'

    // this dependency is not required if you are already using your own
    // slf4j implementation
    api 'org.slf4j:slf4j-nop:1.7.25'

    // Testing-only dependencies
    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.robolectric:robolectric:4.0-beta-1'
    testImplementation "com.google.truth:truth:0.42"
    androidTestImplementation "org.mockito:mockito-core:3.1.0"
    androidTestImplementation "com.google.truth:truth:0.42"
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    // retrofit
    api 'com.squareup.retrofit2:retrofit:2.5.0'
    api 'com.squareup.retrofit2:converter-gson:2.5.0'
    api 'com.squareup.retrofit2:converter-scalars:2.5.0'
    //Logging Network Calls
    api 'com.squareup.okhttp3:logging-interceptor:3.6.0'

}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/xendit-android-release.aar") // replace with your library name
            groupId this.group
            artifactId 'xendit-android' // replace with your library artifact id
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

tasks.withType(Javadoc).all { enabled = false }

apply plugin: 'maven'
apply plugin: 'signing'

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

artifacts {
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
String ossrhUser = properties.getProperty('ossrh.username')
String ossrhPassword = properties.getProperty('ossrh.password')

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }

            pom.project {
                name bintrayName
                packaging 'aar'
                // optionally artifactId can be defined here
                description libraryDescription
                url siteUrl

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url gitUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }
        }
    }
}

nexusStaging {
    serverUrl = 'https://s01.oss.sonatype.org/service/local/'
    username = ossrhUser
    password = ossrhPassword
    repositoryDescription = 'Closed and released using gradle script'
    packageGroup = publishedGroupId
}
